# structure of sets

# set_key:                                        # put here the name of the set
#     symbol: a                                   # symbol of the set
#     table_name: _set_a                          # name of the table of the set in the database
#     split_problem: False                        # (optional) if the set defines independent numerical sub-problems
#     copy_from: another_set_key                  # (optional) key of another set to copy the data from (table_structure must be filled anyway)
#     table_structure:                            # structure of the set sqlite table (columns)
#         name: [a_Names, TYPE]                   # header and type of the main set entry (defining set items names)
#         aggregation: [a_Agg, TEXT]              # (optional) header of set entries that are matching another set (aggregation)
#         filters:                                # (optional) add multiple filter columns if needed
#             filter_key_0:                       # (int, str) key of the filter category
#                 header: [a_Cat_1, TEXT]         # header and type of the filter category
#                 values: [a_1a, a_1b, a_1c]      # values that will be present in the filter category
#             filter_key_1:
#                 header: [a_Cat_2, TEXT] 
#                 values: [a_2a, a_2b]


# -----------------------------------------------------------------------------
# sets



scenarios:
    symbol: s  # symbol of the set 
    table_name: _set_scenario # name of the table of the set in the database
    split_problem: True # (optional) if the items of the set defines separate problems 
    table_structure:
        name: [scenario_Names, TEXT] # header of set entries names in database set table



techs:
    symbol: techs  # symbol of the set 
    table_name: _set_techs # name of the table of the set in the database
    table_structure:
        name: [techs_Names, TEXT] # header of set entries names in database set table
        filters:
            time_resolution:  # (int) index of the category in the set
                header: [time_resoultion, TEXT] 
                values: [hourly, yearly]


flows:
    symbol: flows  # symbol of the set 
    table_name: _set_flows # name of the table of the set in the database
    table_structure:
        name: [flows_Names, TEXT] # header of set entries names in database set table
        aggregation: [flows_agg, TEXT] # (optional) header of set entries that are matching another set (aggregation)
        filters:
            time_resolution:  # (int) index of the category in the set
                header: [time_resoultion, TEXT] 
                values: [hourly, yearly]


flows_agg:
    symbol: flows_agg # symbol of the set 
    table_name: _set_flows_agg # name of the table of the set in the database
    table_structure:
        name: [flows_agg_Names, TEXT] # header of set entries names in database set table
        filters:
            time_resolution:  # (int) index of the category in the set
                header: [time_resoultion, TEXT] 
                values: [hourly, yearly]

years:
    symbol: years # symbol of the set 
    table_name: _set_years # name of the table of the set in the database
    table_structure:
        name: [years, TEXT] # header of set entries names in database set table

hours:
    symbol: hours # symbol of the set 
    table_name: _set_hours # name of the table of the set in the database
    table_structure:
        name: [hours, TEXT] # header of set entries names in database set table

